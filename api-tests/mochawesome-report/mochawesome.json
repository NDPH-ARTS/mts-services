{
  "stats": {
    "suites": 2,
    "tests": 2,
    "passes": 0,
    "pending": 0,
    "failures": 2,
    "start": "2021-01-08T18:01:00.777Z",
    "end": "2021-01-08T18:01:00.800Z",
    "duration": 23,
    "testsRegistered": 2,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "4add2690-5211-4f3a-9546-a41f152c3044",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before each\" hook in \"{root}\"",
        "fullTitle": "\"before each\" hook in \"{root}\"",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "console.log(`Base URL: ${conf.BASE_URL}`)\nbaseRequest = request(conf.BASE_URL)",
        "err": {},
        "isRoot": true,
        "uuid": "e23ca627-84a1-4116-8cd0-5d2c02d241d0",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before each\" hook in \"{root}\"",
        "fullTitle": "\"before each\" hook in \"{root}\"",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "console.log(`Base URL: ${conf.BASE_URL}`)\nbaseRequest = request(conf.BASE_URL)",
        "err": {},
        "isRoot": true,
        "uuid": "39491699-1950-4b93-bf3f-39067357613b",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "15a2cc18-d760-4326-92d4-61df0faf1e92",
        "title": "Practitioner Service",
        "fullFile": "/Users/sameerapurini/Documents/Sam/NDPH/mts-services/api-tests/specs/get_trials.js",
        "file": "/specs/get_trials.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Should create a new FHIR practitioner",
            "fullTitle": "Practitioner Service Should create a new FHIR practitioner",
            "timedOut": false,
            "duration": 2,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "const response = await baseRequest.post(\"/Practitioner\").send(person);\nexpect(response.status).to.equal(201);",
            "err": {
              "message": "TypeError: Cannot read property 'address' of undefined",
              "estack": "TypeError: Cannot read property 'address' of undefined\n    at Test.serverAddress (node_modules/supertest/lib/test.js:55:18)\n    at new Test (node_modules/supertest/lib/test.js:36:12)\n    at Object.obj.<computed> [as post] (node_modules/supertest/index.js:25:14)\n    at Context.<anonymous> (specs/get_trials.js:19:40)\n    at processImmediate (internal/timers.js:461:21)"
            },
            "isRoot": false,
            "uuid": "2ef012fe-1c0d-4bbb-9b27-d81ade6a9a44",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "2ef012fe-1c0d-4bbb-9b27-d81ade6a9a44"
        ],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c374a19d-d3f1-4103-bc22-523602747c34",
        "title": "Practitioner Service",
        "fullFile": "/Users/sameerapurini/Documents/Sam/NDPH/mts-services/api-tests/specs/practitioner-services.js",
        "file": "/specs/practitioner-services.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Should create a new FHIR practitioner",
            "fullTitle": "Practitioner Service Should create a new FHIR practitioner",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "const response = await baseRequest.post(\"/Practitioner\").send(person);\nexpect(response.status).to.equal(201);",
            "err": {
              "message": "TypeError: Cannot read property 'address' of undefined",
              "estack": "TypeError: Cannot read property 'address' of undefined\n    at Test.serverAddress (node_modules/supertest/lib/test.js:55:18)\n    at new Test (node_modules/supertest/lib/test.js:36:12)\n    at Object.obj.<computed> [as post] (node_modules/supertest/index.js:25:14)\n    at Context.<anonymous> (specs/practitioner-services.js:17:44)\n    at processImmediate (internal/timers.js:461:21)"
            },
            "isRoot": false,
            "uuid": "7640e261-9b3e-4fe2-b645-c84708a5ba46",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "7640e261-9b3e-4fe2-b645-c84708a5ba46"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2021
}
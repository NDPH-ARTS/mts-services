name: Docker build and push

on:
  pull_request:
    paths-ignore:
      - "**.md"
  push:
  workflow_dispatch:

jobs:
  build:
    name: Build services
    strategy:
      matrix:
        service_name:
          [
              "sample-service",
              "practitioner-service",
              "site-service",
              "role-service",
              "init-service",
              "config-server",
              "discovery-server",
              "gateway-server",
          ]
    env:
      GHCR: ghcr.io/ndph-arts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_LOGIN }}

      - name: Check docker images
        id: check_docker_images
        run: |
          set -o nounset
          RUNTIME_TAG=$GHCR/${{ matrix.service_name }}:${{ github.sha }}
          echo "::set-output name=runtime_tag::${RUNTIME_TAG}"

          # Hashing most files that can change the full dependency stage and using as a tag.
          DEPS_TAG=$GHCR/mts-services-deps-cache-full:${{ hashFiles('Dockerfile', '**/pom*.xml') }}
          echo "::set-output name=deps_tag::${DEPS_TAG}"

          echo "Checking if the runtime image exists..."
          # We might have failures, but shouldn't exit.
          set +o errexit
          docker manifest inspect $RUNTIME_TAG > /dev/null
          RUNTIME_VALUE=$?
          set -o errexit
          if [ ${RUNTIME_VALUE} -eq 0 ]
          then
            echo "Runtime image already exists for this commit SHA, no need to rebuild it."
            echo "::set-output name=runtime_exists::true"
            exit 0
          fi

          set +o errexit
          docker pull $DEPS_TAG
          DEPS_VALUE=$?
          set -o errexit
          if [ ${DEPS_VALUE} -eq 0 ]
          then
            echo "Deps stage exists with the required tag, no need to rebuild it."
            echo "::set-output name=deps_exists::true"
          fi

      - name: Build & publish deps stage
        # If both images don't exist we need to build the deps (since we'll build the runtime image in the next step)
        if: ${{ steps.check_docker_images.outputs.runtime_exists != 'true' && steps.check_docker_images.outputs.deps_exists != 'true' }}
        env:
          DOCKER_BUILDKIT: 1
        run: |
          set -o nounset
          set -o errexit
          # Using stage deps-cache-full to share in all services.
          docker build --target deps-cache-full --cache-from ${{ steps.check_docker_images.outputs.deps_tag }} \
            --tag  ${{ steps.check_docker_images.outputs.deps_tag }} --build-arg BUILDKIT_INLINE_CACHE=1 .
          docker push ${{ steps.check_docker_images.outputs.deps_tag }}

      - name: Build & publish runtime image
        if: ${{ steps.check_docker_images.outputs.runtime_exists != 'true' }}
        env:
          DOCKER_BUILDKIT: 1
        run: |
          set -o nounset
          set -o errexit
          # prepare the version used for runtime telemetry
          VERSION=${{ github.sha }}:$(mvn help:evaluate --projects ${{ matrix.service_name }} -Dexpression=project.version -q -DforceStdout)
          docker build --build-arg SVC="${{ matrix.service_name }}" --build-arg DEPS_CACHE=full --build-arg VERSION=${VERSION} \
            --cache-from ${{ steps.check_docker_images.outputs.deps_tag }} \
            --cache-from ${{ steps.check_docker_images.outputs.runtime_tag }} \
            --tag ${{ steps.check_docker_images.outputs.runtime_tag }} --build-arg BUILDKIT_INLINE_CACHE=1 .
          docker push ${{ steps.check_docker_images.outputs.runtime_tag }}

      - name: Publish named image
        # The way to run this only on "merge" to main branch is to catch the "push" event into it (and schedule).
        if: github.ref == 'refs/heads/main' && (github.event_name == 'schedule' || github.event_name == 'push')
        env:
          # We use 2 tags: main-latest (every PR merge to main) and main-nightly (main branch images every night)
          TAG: ${{ github.event_name == 'schedule' && 'main-nightly' || 'main-latest' }}
        run: |
          set -o errexit
          set -o nounset
          TO_TAG=$GHCR/${{ matrix.service_name }}:$TAG
          # Scheduled runs skip the build, so need to pull for the image to be present to retag/push.
          docker pull ${{ steps.check_docker_images.outputs.runtime_tag }}
          docker tag ${{ steps.check_docker_images.outputs.runtime_tag }} $TO_TAG
          docker push $TO_TAG

  buildall:
    runs-on: ubuntu-latest
    name: Build services check all
    needs: build
    steps:
      - name: Check build matrix status
        if: ${{ needs.build.result != 'success' }}
        run: exit 1

  test:
    name: API Integration Tests
    if: (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Start services using Docker Compose
        timeout-minutes: 5
        env:
          PROFILE: dev
          SAPASSWORD: $(openssl rand -base64 12)
          GITHUB_SHA: ${{github.sha}}
          INIT_SERVICE_ACCOUNT_OBJECTID: e6fd67af-ef25-4a4b-af7c-0ed8a7bd40cf
          MTS_AZURE_APP_CLIENT_ID: f352ce15-0142-4dfa-8e18-801ee6391557
          AZURE_CLIENT_ID: a2171b8b-4e97-4523-933a-dc18ef7ef1fe
          AZURE_TENANT_ID: 5d23383f-2acb-448e-8353-4b4573b82276
          AZURE_CLIENT_SECRET: ${{ secrets.CI_CLIENT_SECRET }}
        run: |
          ./.ci/docker/check-docker-compose-services.sh
      - name: Run init
        env:
          PROFILE: dev
          GITHUB_SHA: ${{github.sha}}
          # The following is used by the init-service to generate a token
          MTS_AZURE_APP_CLIENT_ID: f352ce15-0142-4dfa-8e18-801ee6391557
          INIT_SERVICE_ACCOUNT_USERNAME: init-service@mtsdevndph.onmicrosoft.com
          INIT_SERVICE_ACCOUNT_PASSWORD: ${{ secrets.INIT_SERVICE_ACCOUNT_PASSWORD }}
        run: |
          set -o nounset
          set -o errexit
          docker-compose run --no-deps init-service
      - name: Run API Tests
        env:
          BASE_URL: http://localhost:8080
          MTS_AZURE_APP_CLIENT_ID: f352ce15-0142-4dfa-8e18-801ee6391557
          AZURE_CLIENT_ID: a2171b8b-4e97-4523-933a-dc18ef7ef1fe
          AZURE_TENANT_ID: 5d23383f-2acb-448e-8353-4b4573b82276
          AZURE_CLIENT_SECRET: ${{ secrets.CI_CLIENT_SECRET }}
          AUTOMATION_USER_NAME: test-automation@mtsdevndph.onmicrosoft.com
          AUTOMATION_USER_PASSWORD: ${{ secrets.AUTOMATION_USER_PASSWORD }}
        run: |
          npm run --prefix api-tests api-test-ci
      - name: Prepare docker-compose logs
        if: always()
        run: |
          docker-compose logs --tail="all" > docker-compose.log
      - name: Upload docker-compose logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: docker-compose-logs
          path: docker-compose.log
      - name: Process API Tests Report
        if: always()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: API Tests Report Check
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: "api-tests/api-test-results.xml"
          fail_on_test_failures: true
          fail_if_no_tests: true

  integration:
    name: "Azure integration"
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './mts-trial-deployment-config/terraform'
    env:
      ARM_CLIENT_ID: 2620bfcd-13ee-4f8b-81fd-bd128efdb707
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: f3fba52d-c7db-46f8-9e7a-766ca869972e
      ARM_TENANT_ID: 99804659-431f-48fa-84c1-65c9609de05b
      ARM_ACCESS_KEY: ${{secrets.TF_ARM_ACCESS_KEY}}
      TRIAL_NAME: mainnightly
      DEFINITION_PATH: ${{github.workspace}}/mts-trial-deployment-config/trials/mainnightly/definition.yml
    steps:
      - name: Checkout deployment/config repo
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner }}/mts-trial-deployment-config
          path: mts-trial-deployment-config

      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform workspace
        id: tf_workspace
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          # github ref comes with "/" which is not valid for workspace names
          ref_for_workspace="${GITHUB_REF//\//_}"
          workspace_name="${{ github.run_number }}-${ref_for_workspace}"
          terraform workspace select ${workspace_name} || terraform workspace new ${workspace_name}
          echo "::set-output name=workspace_name::${workspace_name}"

      - name: Update definition file for this run
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          # yq support multiple expressions in a single command but this is more readable
          # override the trial name
          yq eval '.name = strenv(GITHUB_RUN_NUMBER)' ${DEFINITION_PATH} --inplace
          # override the image tag to the currect sha
          yq eval '(.. | select(. | has("image_tag"))).image_tag = strenv(GITHUB_SHA)' ${DEFINITION_PATH} --inplace

      - name: Prepare deployment variables
        env:
          TFVARS_TEMPLATE: 'tfvars.template'
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          # Return 0 if file $1 exists and ending by end of line character, else return 1
          check_ending_eol() {
            [[ -s "$1" && -z "$(tail -c 1 "$1")" ]]
          }

          if ! check_ending_eol ${TFVARS_TEMPLATE}
          then
            echo "ERROR: ${TFVARS_TEMPLATE} doesn't exist or doesn't end with new line." >&2
            exit 1
          fi

          cat ${TFVARS_TEMPLATE} | while read line
          do
              # no need to process comment lines that start with "#", or empty ones.
              if [[ $line == \#* ]] || [[ -z "$line" ]]; then continue; fi

              # split the line text with the = char as a separator
              line_array=(${line//=/ })

              var_name=${line_array[0]}
              property_path=${line_array[1]}
              property_value=$(yq eval ${property_path} $DEFINITION_PATH)
              echo "${var_name}=\"${property_value}\"" >> $TRIAL_NAME.tfvars
          done

          cat $TRIAL_NAME.tfvars

      - name: Terraform plan
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          terraform plan -out=tfplan -var-file=$TRIAL_NAME.tfvars \
            -var="owner=${{ github.actor }}" \
            -var="github_ref=${{ github.ref }}" \
            -var="init_username=${{secrets.INIT_USERNAME}}" \
            -var="init_password=${{secrets.INIT_PASSWORD}}" \
            -var="init_client_id=${{secrets.INIT_CLIENT_ID}}" \
            -var="environment=pr" -var="location=eastus2"

      - name: Terraform apply
        run: |
          terraform apply -auto-approve tfplan

      - name: Terraform destroy
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          # destroy should get all vars as the plan/apply command. A plan file isn't valid here.
          terraform destroy -auto-approve -var-file=$TRIAL_NAME.tfvars \
            -var="owner=${{ github.actor }}" \
            -var="github_ref=${{ github.ref }}" \
            -var="init_username=${{secrets.INIT_USERNAME}}" \
            -var="init_password=${{secrets.INIT_PASSWORD}}" \
            -var="init_client_id=${{secrets.INIT_CLIENT_ID}}" \
            -var="environment=pr" -var="location=eastus2"

          terraform workspace select default
          terraform workspace delete ${{ steps.tf_workspace.outputs.workspace_name }}

name: Docker build and push

on:
  pull_request:
    paths-ignore:
      - "**.md"
  push:
    # ONLY main branch should be listed below!
    branches: [ main ]
  # schedule only runs on the main branch
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "1 1 * * *"
  workflow_dispatch:

jobs:
  build:
    name: Build services
    strategy:
      matrix:
        service_name:
          [
              "sample-service",
              "practitioner-service",
              "site-service",
              "role-service",
              "init-service",
              "config-server",
              "discovery-server",
              "gateway-server",
          ]
    env:
      GHCR: ghcr.io/ndph-arts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_LOGIN }}

      - name: Check docker images
        id: check_docker_images
        run: |
          set -o nounset
          RUNTIME_TAG=$GHCR/${{ matrix.service_name }}:${{ github.sha }}
          echo "::set-output name=runtime_tag::${RUNTIME_TAG}"

          # Hashing most files that can change the full dependency stage and using as a tag.
          DEPS_TAG=$GHCR/mts-services-deps-cache-full:${{ hashFiles('Dockerfile', '**/pom*.xml') }}
          echo "::set-output name=deps_tag::${DEPS_TAG}"

          echo "Checking if the runtime image exists..."
          # We might have failures, but shouldn't exit.
          set +o errexit
          docker manifest inspect $RUNTIME_TAG > /dev/null
          RUNTIME_VALUE=$?
          set -o errexit
          if [ ${RUNTIME_VALUE} -eq 0 ]
          then
            echo "Runtime image already exists for this commit SHA, no need to rebuild it."
            echo "::set-output name=runtime_exists::true"
            exit 0
          fi

          echo "Trying to pull the deps image (if exists) ..."
          set +o errexit
          docker pull $DEPS_TAG
          DEPS_VALUE=$?
          set -o errexit
          if [ ${DEPS_VALUE} -eq 0 ]
          then
            echo "Deps stage exists with the required tag, no need to rebuild it."
            echo "::set-output name=deps_exists::true"
          fi

      - name: Build & publish deps stage
        # If both images don't exist we need to build the deps (since we'll build the runtime image in the next step)
        if: ${{ steps.check_docker_images.outputs.runtime_exists != 'true' && steps.check_docker_images.outputs.deps_exists != 'true' }}
        env:
          DOCKER_BUILDKIT: 1
        run: |
          set -o nounset
          set -o errexit
          # Using stage deps-cache-full to share in all services.
          docker build --target deps-cache-full --cache-from ${{ steps.check_docker_images.outputs.deps_tag }} \
            --tag  ${{ steps.check_docker_images.outputs.deps_tag }} --build-arg BUILDKIT_INLINE_CACHE=1 .
          docker push ${{ steps.check_docker_images.outputs.deps_tag }}

      - name: Build & publish runtime image
        if: ${{ steps.check_docker_images.outputs.runtime_exists != 'true' }}
        env:
          DOCKER_BUILDKIT: 1
        run: |
          set -o nounset
          set -o errexit
          # prepare the version used for runtime telemetry
          VERSION=${{ github.sha }}:$(mvn help:evaluate --projects ${{ matrix.service_name }} -Dexpression=project.version -q -DforceStdout)
          docker build --build-arg SVC="${{ matrix.service_name }}" --build-arg DEPS_CACHE=full --build-arg VERSION=${VERSION} \
            --cache-from ${{ steps.check_docker_images.outputs.deps_tag }} \
            --cache-from ${{ steps.check_docker_images.outputs.runtime_tag }} \
            --tag ${{ steps.check_docker_images.outputs.runtime_tag }} --build-arg BUILDKIT_INLINE_CACHE=1 .
          docker push ${{ steps.check_docker_images.outputs.runtime_tag }}

      - name: Publish named image
        # The way to run this only on "merge" to main branch is to catch the "push" event into it (and schedule).
        if: github.ref == 'refs/heads/main' && (github.event_name == 'schedule' || github.event_name == 'push')
        env:
          # We use 2 tags: main-latest (every PR merge to main) and main-nightly (main branch images every night)
          TAG: ${{ github.event_name == 'schedule' && 'main-nightly' || 'main-latest' }}
        run: |
          set -o errexit
          set -o nounset
          TO_TAG=$GHCR/${{ matrix.service_name }}:$TAG
          # Scheduled runs skip the build, so need to pull for the image to be present to retag/push.
          docker pull ${{ steps.check_docker_images.outputs.runtime_tag }}
          docker tag ${{ steps.check_docker_images.outputs.runtime_tag }} $TO_TAG
          docker push $TO_TAG

      - name: Deploy main-nightly image
        if: github.ref == 'refs/heads/main' && github.event_name == 'schedule'
        uses: convictional/trigger-workflow-and-wait@v1.3.0
        with:
          owner: ndph-arts
          repo: mts-deployment-config
          github_token: ${{ secrets.DEPLOYMENT_TRIGGER_PAT }}
          workflow_file_name: terraform-plan-apply.yml
          ref: main
          wait_interval: 60
          inputs: '{ trialDefinitionPath": "trials/mainnightly/definition.yml" }'
          propagate_failure: true
          wait_workflow: true
           
  buildall:
    runs-on: ubuntu-latest
    name: Build services check all
    needs: build
    steps:
      - name: Check build matrix status
        if: ${{ needs.build.result != 'success' }}
        run: exit 1

  test:
    name: API Integration Tests
    if: (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Start services using Docker Compose
        timeout-minutes: 5
        env:
          PROFILE: dev
          SAPASSWORD: $(openssl rand -base64 12)
          GITHUB_SHA: ${{github.sha}}
          MTS_AZURE_APP_CLIENT_ID: fa5cde1d-d6f8-4d13-9fa4-4d7a374cb290
          AZURE_CLIENT_ID: a2171b8b-4e97-4523-933a-dc18ef7ef1fe
          AZURE_TENANT_ID: 99804659-431f-48fa-84c1-65c9609de05b
          AZURE_CLIENT_SECRET: ${{ secrets.CI_CLIENT_SECRET }}
          LOGGING_LEVEL_ROOT: DEBUG
        run: ./.ci/docker/check-docker-compose-services.sh
      - name: Run init
        env:
          PROFILE: dev
          GITHUB_SHA: ${{github.sha}}
          # The following is used by the init-service to generate a token
          MTS_AZURE_APP_CLIENT_ID: fa5cde1d-d6f8-4d13-9fa4-4d7a374cb290
          AZURE_CLIENT_ID: 1a38570c-ddbf-4e8e-8156-2ab88d7bdeef
          AZURE_TENANT_ID: 99804659-431f-48fa-84c1-65c9609de05b
          AZURE_CLIENT_SECRET: ${{ secrets.INIT_SERVICE_SECRET }}
        run: |
          set -o nounset
          set -o errexit
          docker-compose run --no-deps init-service
      - name: Run API Tests
        env:
          BASE_URL: http://localhost:8080
          MTS_AZURE_APP_CLIENT_ID: fa5cde1d-d6f8-4d13-9fa4-4d7a374cb290
          AZURE_CLIENT_ID: a2171b8b-4e97-4523-933a-dc18ef7ef1fe
          AZURE_TENANT_ID: 99804659-431f-48fa-84c1-65c9609de05b
          AZURE_CLIENT_SECRET: ${{ secrets.CI_CLIENT_SECRET }}
          AUTOMATION_USER_NAME: test-automation@mtsdevndph.onmicrosoft.com
          AUTOMATION_USER_PASSWORD: ${{ secrets.AUTOMATION_USER_PASSWORD }}
          BOOTSTRAP_USER_NAME: bootstrap@mtsdevndph.onmicrosoft.com
          BOOTSTRAP_USER_PASSWORD: ${{ secrets.BOOTSTRAP_USER_PASSWORD }}
          QAWITHCREATE_USER_NAME: qa.with-create@mtsdevndph.onmicrosoft.com
          QAWITHCREATE_USER_PASSWORD: ${{ secrets.QA_WITH_CREATE_USER_PASSWORD }}
        run: |
          npm run --prefix api-tests api-test-ci
      - name: Prepare docker-compose logs
        if: always()
        run: |
          docker-compose ps

          mkdir run-logs
          docker-compose logs --no-color --timestamps --tail="all" > ./run-logs/all.log
          for service_name in discovery-server config-server gateway-server role-service site-service practitioner-service; do
            docker-compose logs --no-color --timestamps --tail="all" ${service_name} > ./run-logs/${service_name}.log
          done

      - name: Upload docker-compose logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: run-logs/
      - name: Process API Tests Report
        if: always()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: API Tests Report Check
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: "api-tests/api-test-results.xml"
          fail_on_test_failures: true
          fail_if_no_tests: true

name: Docker build and push

on:
  pull_request:
    paths-ignore:
      - "**.md"
  push:
    # ONLY main branch should be listed below!
    branches: [main]
  # schedule only runs on the main branch
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "1 1 * * *"
  workflow_dispatch:

jobs:
  build:
    name: Build services
    strategy:
      matrix:
        service_name:
          [
            "sample-service",
            "practitioner-service",
            "site-service",
            "role-service",
            "init-service",
            "config-server",
            "discovery-server",
            "gateway-server",
          ]
    env:
      GHCR: ghcr.io/ndph-arts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_LOGIN }}
      - name: Build & publish runtime image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          set -o errexit
          set -o nounset

          TAG=$GHCR/${{ matrix.service_name }}:${{ github.sha }}

          docker build --build-arg SVC="${{ matrix.service_name }}" -t $TAG -f "${{ matrix.service_name }}"/Dockerfile .
          docker push $TAG
      - name: Publish named image
        # The way to run this only on "merge" to main branch is to catch the "push" event into it (and schedule).
        if: github.ref == 'refs/heads/main' && (github.event_name == 'schedule' || github.event_name == 'push')
        env:
          # We use 2 tags: main-latest (every PR merge to main) and main-nightly (main branch images every night)
          TAG: ${{ github.event_name == 'schedule' && 'main-nightly' || 'main-latest' }}
        run: |
          set -o errexit
          set -o nounset

          FROM_TAG=$GHCR/${{ matrix.service_name }}:${{ github.sha }}
          TO_TAG=$GHCR/${{ matrix.service_name }}:$TAG

          # assume the step before created the image with the sha tag
          docker tag $FROM_TAG $TO_TAG
          docker push $TO_TAG

  test:
    name: API Integration Tests
    if: (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Start services using Docker Compose
        timeout-minutes: 5
        env:
          PROFILE: dev
          SAPASSWORD: $(openssl rand -base64 12)
          GITHUB_SHA: ${{github.sha}}
          INIT_SERVICE_ACCOUNT_OBJECTID: e6fd67af-ef25-4a4b-af7c-0ed8a7bd40cf
          MTS_AZURE_APP_CLIENT_ID: f352ce15-0142-4dfa-8e18-801ee6391557
          AZURE_CLIENT_ID: a2171b8b-4e97-4523-933a-dc18ef7ef1fe
          AZURE_TENANT_ID: 5d23383f-2acb-448e-8353-4b4573b82276
          AZURE_CLIENT_SECRET: ${{ secrets.CI_CLIENT_SECRET }}
          AUTOMATION_USER_NAME: test-automation@mtsdevndph.onmicrosoft.com
          AUTOMATION_USER_PASSWORD: ${{ secrets.AUTOMATION_USER_PASSWORD }}
        run: |
          ./.ci/docker/check-docker-compose-services.sh
      - name: Run init
        env:
          PROFILE: dev
          GITHUB_SHA: ${{github.sha}}
          # The following is used by the init-service to generate a token
          MTS_AZURE_APP_CLIENT_ID: f352ce15-0142-4dfa-8e18-801ee6391557
          INIT_SERVICE_ACCOUNT_USERNAME: init-service@mtsdevndph.onmicrosoft.com
          INIT_SERVICE_ACCOUNT_PASSWORD: ${{ secrets.INIT_SERVICE_ACCOUNT_PASSWORD }}
        run: |
          set -o nounset
          set -o errexit
          docker-compose run --no-deps init-service
      - name: Run API Tests
        env:
          BASE_URL: http://localhost:8080
          MTS_AZURE_APP_CLIENT_ID: f352ce15-0142-4dfa-8e18-801ee6391557
          AZURE_CLIENT_ID: a2171b8b-4e97-4523-933a-dc18ef7ef1fe
          AZURE_TENANT_ID: 5d23383f-2acb-448e-8353-4b4573b82276
          AZURE_CLIENT_SECRET: ${{ secrets.CI_CLIENT_SECRET }}
          TEMP_USER_CRED: ${{ secrets.TEMP_USER_CRED }}
        run: |
          npm run --prefix api-tests api-test-ci
      - name: Process API Tests Report
        if: always()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: API Tests Report Check
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: "api-tests/api-test-results.xml"
          fail_on_test_failures: true
          fail_if_no_tests: true
      - name: Stop compose services
        # this step might be redundant since the job is finishing anyway...
        run: |
          docker-compose down
